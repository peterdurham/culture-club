# source: https://us1.prisma.sh/peter-durham-ae1855/culture-club/dev
# timestamp: Sat Apr 04 2020 17:51:07 GMT-0700 (Pacific Daylight Time)

type AggregateBook {
  count: Int!
}

type AggregateCartItem {
  count: Int!
}

type AggregateGame {
  count: Int!
}

type AggregateItem {
  count: Int!
}

type AggregateMovie {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderItem {
  count: Int!
}

type AggregatePlayedItItem {
  count: Int!
}

type AggregateReadItItem {
  count: Int!
}

type AggregateSeenItItem {
  count: Int!
}

type AggregateToPlayItem {
  count: Int!
}

type AggregateToReadItem {
  count: Int!
}

type AggregateToWatchItem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Book implements Node {
  id: ID!
  title: String!
  author: String!
  description: String!
  year: Int!
  genre1: BookGenre!
  genre2: BookGenre
  genre3: BookGenre
  publisher: String
  printLength: Int
  pdfURL: String
  image: String
  largeImage: String
  user: User!
}

"""A connection to a list of items."""
type BookConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  id: ID
  title: String!
  author: String!
  description: String!
  year: Int!
  genre1: BookGenre!
  genre2: BookGenre
  genre3: BookGenre
  publisher: String
  printLength: Int
  pdfURL: String
  image: String
  largeImage: String
  user: UserCreateOneInput!
}

input BookCreateOneInput {
  create: BookCreateInput
  connect: BookWhereUniqueInput
}

"""An edge in a connection."""
type BookEdge {
  """The item at the end of the edge."""
  node: Book!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookGenre {
  UNSELECTED
  ART
  BIOGRAPHY
  BUSINESS
  CHILDRENS
  CLASSICS
  COMIC
  COOKBOOK
  ECONOMICS
  FANTASY
  HISTORY
  HORROR
  MYSTERY
  MUSIC
  NEW_AGE
  PHILOSOPHY
  POETRY
  MYTHOLOGY
  ROMANCE
  RELIGION
  SCI_FI
  SCIENCE
  SELF_HELP
  THRILLER
  TRAVEL
  WESTERN
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  author_ASC
  author_DESC
  description_ASC
  description_DESC
  year_ASC
  year_DESC
  genre1_ASC
  genre1_DESC
  genre2_ASC
  genre2_DESC
  genre3_ASC
  genre3_DESC
  publisher_ASC
  publisher_DESC
  printLength_ASC
  printLength_DESC
  pdfURL_ASC
  pdfURL_DESC
  image_ASC
  image_DESC
  largeImage_ASC
  largeImage_DESC
}

type BookPreviousValues {
  id: ID!
  title: String!
  author: String!
  description: String!
  year: Int!
  genre1: BookGenre!
  genre2: BookGenre
  genre3: BookGenre
  publisher: String
  printLength: Int
  pdfURL: String
  image: String
  largeImage: String
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookWhereInput
}

input BookUpdateDataInput {
  title: String
  author: String
  description: String
  year: Int
  genre1: BookGenre
  genre2: BookGenre
  genre3: BookGenre
  publisher: String
  printLength: Int
  pdfURL: String
  image: String
  largeImage: String
  user: UserUpdateOneRequiredInput
}

input BookUpdateInput {
  title: String
  author: String
  description: String
  year: Int
  genre1: BookGenre
  genre2: BookGenre
  genre3: BookGenre
  publisher: String
  printLength: Int
  pdfURL: String
  image: String
  largeImage: String
  user: UserUpdateOneRequiredInput
}

input BookUpdateManyMutationInput {
  title: String
  author: String
  description: String
  year: Int
  genre1: BookGenre
  genre2: BookGenre
  genre3: BookGenre
  publisher: String
  printLength: Int
  pdfURL: String
  image: String
  largeImage: String
}

input BookUpdateOneInput {
  create: BookCreateInput
  connect: BookWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BookUpdateDataInput
  upsert: BookUpsertNestedInput
}

input BookUpsertNestedInput {
  update: BookUpdateDataInput!
  create: BookCreateInput!
}

input BookWhereInput {
  """Logical AND on all given filters."""
  AND: [BookWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  author: String

  """All values that are not equal to given value."""
  author_not: String

  """All values that are contained in given list."""
  author_in: [String!]

  """All values that are not contained in given list."""
  author_not_in: [String!]

  """All values less than the given value."""
  author_lt: String

  """All values less than or equal the given value."""
  author_lte: String

  """All values greater than the given value."""
  author_gt: String

  """All values greater than or equal the given value."""
  author_gte: String

  """All values containing the given string."""
  author_contains: String

  """All values not containing the given string."""
  author_not_contains: String

  """All values starting with the given string."""
  author_starts_with: String

  """All values not starting with the given string."""
  author_not_starts_with: String

  """All values ending with the given string."""
  author_ends_with: String

  """All values not ending with the given string."""
  author_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  genre1: BookGenre

  """All values that are not equal to given value."""
  genre1_not: BookGenre

  """All values that are contained in given list."""
  genre1_in: [BookGenre!]

  """All values that are not contained in given list."""
  genre1_not_in: [BookGenre!]
  genre2: BookGenre

  """All values that are not equal to given value."""
  genre2_not: BookGenre

  """All values that are contained in given list."""
  genre2_in: [BookGenre!]

  """All values that are not contained in given list."""
  genre2_not_in: [BookGenre!]
  genre3: BookGenre

  """All values that are not equal to given value."""
  genre3_not: BookGenre

  """All values that are contained in given list."""
  genre3_in: [BookGenre!]

  """All values that are not contained in given list."""
  genre3_not_in: [BookGenre!]
  publisher: String

  """All values that are not equal to given value."""
  publisher_not: String

  """All values that are contained in given list."""
  publisher_in: [String!]

  """All values that are not contained in given list."""
  publisher_not_in: [String!]

  """All values less than the given value."""
  publisher_lt: String

  """All values less than or equal the given value."""
  publisher_lte: String

  """All values greater than the given value."""
  publisher_gt: String

  """All values greater than or equal the given value."""
  publisher_gte: String

  """All values containing the given string."""
  publisher_contains: String

  """All values not containing the given string."""
  publisher_not_contains: String

  """All values starting with the given string."""
  publisher_starts_with: String

  """All values not starting with the given string."""
  publisher_not_starts_with: String

  """All values ending with the given string."""
  publisher_ends_with: String

  """All values not ending with the given string."""
  publisher_not_ends_with: String
  printLength: Int

  """All values that are not equal to given value."""
  printLength_not: Int

  """All values that are contained in given list."""
  printLength_in: [Int!]

  """All values that are not contained in given list."""
  printLength_not_in: [Int!]

  """All values less than the given value."""
  printLength_lt: Int

  """All values less than or equal the given value."""
  printLength_lte: Int

  """All values greater than the given value."""
  printLength_gt: Int

  """All values greater than or equal the given value."""
  printLength_gte: Int
  pdfURL: String

  """All values that are not equal to given value."""
  pdfURL_not: String

  """All values that are contained in given list."""
  pdfURL_in: [String!]

  """All values that are not contained in given list."""
  pdfURL_not_in: [String!]

  """All values less than the given value."""
  pdfURL_lt: String

  """All values less than or equal the given value."""
  pdfURL_lte: String

  """All values greater than the given value."""
  pdfURL_gt: String

  """All values greater than or equal the given value."""
  pdfURL_gte: String

  """All values containing the given string."""
  pdfURL_contains: String

  """All values not containing the given string."""
  pdfURL_not_contains: String

  """All values starting with the given string."""
  pdfURL_starts_with: String

  """All values not starting with the given string."""
  pdfURL_not_starts_with: String

  """All values ending with the given string."""
  pdfURL_ends_with: String

  """All values not ending with the given string."""
  pdfURL_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  user: UserWhereInput
}

input BookWhereUniqueInput {
  id: ID
}

type CartItem implements Node {
  id: ID!
  quantity: Int!
  item: Item
  user: User!
}

"""A connection to a list of items."""
type CartItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CartItemEdge]!
  aggregate: AggregateCartItem!
}

input CartItemCreateInput {
  id: ID
  quantity: Int
  item: ItemCreateOneInput
  user: UserCreateOneWithoutCartInput!
}

input CartItemCreateManyWithoutUserInput {
  create: [CartItemCreateWithoutUserInput!]
  connect: [CartItemWhereUniqueInput!]
}

input CartItemCreateWithoutUserInput {
  id: ID
  quantity: Int
  item: ItemCreateOneInput
}

"""An edge in a connection."""
type CartItemEdge {
  """The item at the end of the edge."""
  node: CartItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CartItemOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
}

type CartItemPreviousValues {
  id: ID!
  quantity: Int!
}

input CartItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CartItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CartItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CartItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
}

type CartItemSubscriptionPayload {
  mutation: MutationType!
  node: CartItem
  updatedFields: [String!]
  previousValues: CartItemPreviousValues
}

input CartItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CartItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CartItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CartItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CartItemWhereInput
}

input CartItemUpdateInput {
  quantity: Int
  item: ItemUpdateOneInput
  user: UserUpdateOneRequiredWithoutCartInput
}

input CartItemUpdateManyDataInput {
  quantity: Int
}

input CartItemUpdateManyMutationInput {
  quantity: Int
}

input CartItemUpdateManyWithoutUserInput {
  create: [CartItemCreateWithoutUserInput!]
  connect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  disconnect: [CartItemWhereUniqueInput!]
  delete: [CartItemWhereUniqueInput!]
  update: [CartItemUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CartItemUpdateManyWithWhereNestedInput!]
  deleteMany: [CartItemScalarWhereInput!]
  upsert: [CartItemUpsertWithWhereUniqueWithoutUserInput!]
}

input CartItemUpdateManyWithWhereNestedInput {
  where: CartItemScalarWhereInput!
  data: CartItemUpdateManyDataInput!
}

input CartItemUpdateWithoutUserDataInput {
  quantity: Int
  item: ItemUpdateOneInput
}

input CartItemUpdateWithWhereUniqueWithoutUserInput {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateWithoutUserDataInput!
}

input CartItemUpsertWithWhereUniqueWithoutUserInput {
  where: CartItemWhereUniqueInput!
  update: CartItemUpdateWithoutUserDataInput!
  create: CartItemCreateWithoutUserInput!
}

input CartItemWhereInput {
  """Logical AND on all given filters."""
  AND: [CartItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [CartItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CartItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  item: ItemWhereInput
  user: UserWhereInput
}

input CartItemWhereUniqueInput {
  id: ID
}

scalar DateTime

type Game implements Node {
  id: ID!
  title: String!
  developer: String
  description: String!
  year: Int!
  numPlayers: NumPlayers
  genre1: GameGenre!
  genre2: GameGenre
  genre3: GameGenre
  platform1: GamePlatform!
  platform2: GamePlatform
  platform3: GamePlatform
  websiteURL: String
  image: String
  largeImage: String
  user: User!
}

"""A connection to a list of items."""
type GameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  id: ID
  title: String!
  developer: String
  description: String!
  year: Int!
  numPlayers: NumPlayers
  genre1: GameGenre!
  genre2: GameGenre
  genre3: GameGenre
  platform1: GamePlatform!
  platform2: GamePlatform
  platform3: GamePlatform
  websiteURL: String
  image: String
  largeImage: String
  user: UserCreateOneInput!
}

input GameCreateOneInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
}

"""An edge in a connection."""
type GameEdge {
  """The item at the end of the edge."""
  node: Game!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GameGenre {
  UNSELECTED
  ACTION
  ADVENTURE
  FIGHTING
  BOARD
  CARD
  MMORPG
  PLATFORM
  PUZZLE
  RACING
  RPG
  RTS
  SCI_FI
  SHOOTER
  SIMULATION
  SPORTS
  STEALTH
  STRATEGY
  SURVIVAL
  VR
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  developer_ASC
  developer_DESC
  description_ASC
  description_DESC
  year_ASC
  year_DESC
  numPlayers_ASC
  numPlayers_DESC
  genre1_ASC
  genre1_DESC
  genre2_ASC
  genre2_DESC
  genre3_ASC
  genre3_DESC
  platform1_ASC
  platform1_DESC
  platform2_ASC
  platform2_DESC
  platform3_ASC
  platform3_DESC
  websiteURL_ASC
  websiteURL_DESC
  image_ASC
  image_DESC
  largeImage_ASC
  largeImage_DESC
}

enum GamePlatform {
  UNSELECTED
  PC
  NES
  SNES
  N64
  GAMECUBE
  WII
  SWITCH
  PSX
  PS2
  PS3
  PS4
  XBOX
  XBOX_360
  XBOX_ONE
  DREAMCAST
  MOBILE
  OTHER
}

type GamePreviousValues {
  id: ID!
  title: String!
  developer: String
  description: String!
  year: Int!
  numPlayers: NumPlayers
  genre1: GameGenre!
  genre2: GameGenre
  genre3: GameGenre
  platform1: GamePlatform!
  platform2: GamePlatform
  platform3: GamePlatform
  websiteURL: String
  image: String
  largeImage: String
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GameSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameWhereInput
}

input GameUpdateDataInput {
  title: String
  developer: String
  description: String
  year: Int
  numPlayers: NumPlayers
  genre1: GameGenre
  genre2: GameGenre
  genre3: GameGenre
  platform1: GamePlatform
  platform2: GamePlatform
  platform3: GamePlatform
  websiteURL: String
  image: String
  largeImage: String
  user: UserUpdateOneRequiredInput
}

input GameUpdateInput {
  title: String
  developer: String
  description: String
  year: Int
  numPlayers: NumPlayers
  genre1: GameGenre
  genre2: GameGenre
  genre3: GameGenre
  platform1: GamePlatform
  platform2: GamePlatform
  platform3: GamePlatform
  websiteURL: String
  image: String
  largeImage: String
  user: UserUpdateOneRequiredInput
}

input GameUpdateManyMutationInput {
  title: String
  developer: String
  description: String
  year: Int
  numPlayers: NumPlayers
  genre1: GameGenre
  genre2: GameGenre
  genre3: GameGenre
  platform1: GamePlatform
  platform2: GamePlatform
  platform3: GamePlatform
  websiteURL: String
  image: String
  largeImage: String
}

input GameUpdateOneInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GameUpdateDataInput
  upsert: GameUpsertNestedInput
}

input GameUpsertNestedInput {
  update: GameUpdateDataInput!
  create: GameCreateInput!
}

input GameWhereInput {
  """Logical AND on all given filters."""
  AND: [GameWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  developer: String

  """All values that are not equal to given value."""
  developer_not: String

  """All values that are contained in given list."""
  developer_in: [String!]

  """All values that are not contained in given list."""
  developer_not_in: [String!]

  """All values less than the given value."""
  developer_lt: String

  """All values less than or equal the given value."""
  developer_lte: String

  """All values greater than the given value."""
  developer_gt: String

  """All values greater than or equal the given value."""
  developer_gte: String

  """All values containing the given string."""
  developer_contains: String

  """All values not containing the given string."""
  developer_not_contains: String

  """All values starting with the given string."""
  developer_starts_with: String

  """All values not starting with the given string."""
  developer_not_starts_with: String

  """All values ending with the given string."""
  developer_ends_with: String

  """All values not ending with the given string."""
  developer_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  numPlayers: NumPlayers

  """All values that are not equal to given value."""
  numPlayers_not: NumPlayers

  """All values that are contained in given list."""
  numPlayers_in: [NumPlayers!]

  """All values that are not contained in given list."""
  numPlayers_not_in: [NumPlayers!]
  genre1: GameGenre

  """All values that are not equal to given value."""
  genre1_not: GameGenre

  """All values that are contained in given list."""
  genre1_in: [GameGenre!]

  """All values that are not contained in given list."""
  genre1_not_in: [GameGenre!]
  genre2: GameGenre

  """All values that are not equal to given value."""
  genre2_not: GameGenre

  """All values that are contained in given list."""
  genre2_in: [GameGenre!]

  """All values that are not contained in given list."""
  genre2_not_in: [GameGenre!]
  genre3: GameGenre

  """All values that are not equal to given value."""
  genre3_not: GameGenre

  """All values that are contained in given list."""
  genre3_in: [GameGenre!]

  """All values that are not contained in given list."""
  genre3_not_in: [GameGenre!]
  platform1: GamePlatform

  """All values that are not equal to given value."""
  platform1_not: GamePlatform

  """All values that are contained in given list."""
  platform1_in: [GamePlatform!]

  """All values that are not contained in given list."""
  platform1_not_in: [GamePlatform!]
  platform2: GamePlatform

  """All values that are not equal to given value."""
  platform2_not: GamePlatform

  """All values that are contained in given list."""
  platform2_in: [GamePlatform!]

  """All values that are not contained in given list."""
  platform2_not_in: [GamePlatform!]
  platform3: GamePlatform

  """All values that are not equal to given value."""
  platform3_not: GamePlatform

  """All values that are contained in given list."""
  platform3_in: [GamePlatform!]

  """All values that are not contained in given list."""
  platform3_not_in: [GamePlatform!]
  websiteURL: String

  """All values that are not equal to given value."""
  websiteURL_not: String

  """All values that are contained in given list."""
  websiteURL_in: [String!]

  """All values that are not contained in given list."""
  websiteURL_not_in: [String!]

  """All values less than the given value."""
  websiteURL_lt: String

  """All values less than or equal the given value."""
  websiteURL_lte: String

  """All values greater than the given value."""
  websiteURL_gt: String

  """All values greater than or equal the given value."""
  websiteURL_gte: String

  """All values containing the given string."""
  websiteURL_contains: String

  """All values not containing the given string."""
  websiteURL_not_contains: String

  """All values starting with the given string."""
  websiteURL_starts_with: String

  """All values not starting with the given string."""
  websiteURL_not_starts_with: String

  """All values ending with the given string."""
  websiteURL_ends_with: String

  """All values not ending with the given string."""
  websiteURL_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  user: UserWhereInput
}

input GameWhereUniqueInput {
  id: ID
}

type Item implements Node {
  id: ID!
  title: String!
  description: String!
  image: String
  largeImage: String
  price: Int!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateInput {
  id: ID
  title: String!
  description: String!
  image: String
  largeImage: String
  price: Int!
  user: UserCreateOneInput!
}

input ItemCreateOneInput {
  create: ItemCreateInput
  connect: ItemWhereUniqueInput
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge."""
  node: Item!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  largeImage_ASC
  largeImage_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ItemPreviousValues {
  id: ID!
  title: String!
  description: String!
  image: String
  largeImage: String
  price: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
}

input ItemUpdateDataInput {
  title: String
  description: String
  image: String
  largeImage: String
  price: Int
  user: UserUpdateOneRequiredInput
}

input ItemUpdateInput {
  title: String
  description: String
  image: String
  largeImage: String
  price: Int
  user: UserUpdateOneRequiredInput
}

input ItemUpdateManyMutationInput {
  title: String
  description: String
  image: String
  largeImage: String
  price: Int
}

input ItemUpdateOneInput {
  create: ItemCreateInput
  connect: ItemWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ItemUpdateDataInput
  upsert: ItemUpsertNestedInput
}

input ItemUpsertNestedInput {
  update: ItemUpdateDataInput!
  create: ItemCreateInput!
}

input ItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input ItemWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Movie implements Node {
  id: ID!
  title: String!
  description: String!
  director: String
  year: Int!
  genre1: MovieGenre!
  genre2: MovieGenre
  genre3: MovieGenre
  length: Int
  budget: Int
  gross: Int
  imdbURL: String
  image: String
  largeImage: String
  user: User!
}

"""A connection to a list of items."""
type MovieConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MovieEdge]!
  aggregate: AggregateMovie!
}

input MovieCreateInput {
  id: ID
  title: String!
  description: String!
  director: String
  year: Int!
  genre1: MovieGenre!
  genre2: MovieGenre
  genre3: MovieGenre
  length: Int
  budget: Int
  gross: Int
  imdbURL: String
  image: String
  largeImage: String
  user: UserCreateOneInput!
}

input MovieCreateOneInput {
  create: MovieCreateInput
  connect: MovieWhereUniqueInput
}

"""An edge in a connection."""
type MovieEdge {
  """The item at the end of the edge."""
  node: Movie!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MovieGenre {
  UNSELECTED
  ACTION
  ADVENTURE
  ANIMATION
  BIOGRAPHY
  CLASSIC
  COMEDY
  CRIME
  CULT
  DOCUMENTARY
  DRAMA
  FAMILY
  FANTASY
  HISTORY
  HORROR
  INDEPENDENT
  INTERNATIONAL
  MUSIC
  MYSTERY
  NATURE
  ROMANCE
  SCI_FI
  SCIENCE
  SPORTS
  THRILLER
}

enum MovieOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  director_ASC
  director_DESC
  year_ASC
  year_DESC
  genre1_ASC
  genre1_DESC
  genre2_ASC
  genre2_DESC
  genre3_ASC
  genre3_DESC
  length_ASC
  length_DESC
  budget_ASC
  budget_DESC
  gross_ASC
  gross_DESC
  imdbURL_ASC
  imdbURL_DESC
  image_ASC
  image_DESC
  largeImage_ASC
  largeImage_DESC
}

type MoviePreviousValues {
  id: ID!
  title: String!
  description: String!
  director: String
  year: Int!
  genre1: MovieGenre!
  genre2: MovieGenre
  genre3: MovieGenre
  length: Int
  budget: Int
  gross: Int
  imdbURL: String
  image: String
  largeImage: String
}

type MovieSubscriptionPayload {
  mutation: MutationType!
  node: Movie
  updatedFields: [String!]
  previousValues: MoviePreviousValues
}

input MovieSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MovieSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MovieSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MovieSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MovieWhereInput
}

input MovieUpdateDataInput {
  title: String
  description: String
  director: String
  year: Int
  genre1: MovieGenre
  genre2: MovieGenre
  genre3: MovieGenre
  length: Int
  budget: Int
  gross: Int
  imdbURL: String
  image: String
  largeImage: String
  user: UserUpdateOneRequiredInput
}

input MovieUpdateInput {
  title: String
  description: String
  director: String
  year: Int
  genre1: MovieGenre
  genre2: MovieGenre
  genre3: MovieGenre
  length: Int
  budget: Int
  gross: Int
  imdbURL: String
  image: String
  largeImage: String
  user: UserUpdateOneRequiredInput
}

input MovieUpdateManyMutationInput {
  title: String
  description: String
  director: String
  year: Int
  genre1: MovieGenre
  genre2: MovieGenre
  genre3: MovieGenre
  length: Int
  budget: Int
  gross: Int
  imdbURL: String
  image: String
  largeImage: String
}

input MovieUpdateOneInput {
  create: MovieCreateInput
  connect: MovieWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MovieUpdateDataInput
  upsert: MovieUpsertNestedInput
}

input MovieUpsertNestedInput {
  update: MovieUpdateDataInput!
  create: MovieCreateInput!
}

input MovieWhereInput {
  """Logical AND on all given filters."""
  AND: [MovieWhereInput!]

  """Logical OR on all given filters."""
  OR: [MovieWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MovieWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  director: String

  """All values that are not equal to given value."""
  director_not: String

  """All values that are contained in given list."""
  director_in: [String!]

  """All values that are not contained in given list."""
  director_not_in: [String!]

  """All values less than the given value."""
  director_lt: String

  """All values less than or equal the given value."""
  director_lte: String

  """All values greater than the given value."""
  director_gt: String

  """All values greater than or equal the given value."""
  director_gte: String

  """All values containing the given string."""
  director_contains: String

  """All values not containing the given string."""
  director_not_contains: String

  """All values starting with the given string."""
  director_starts_with: String

  """All values not starting with the given string."""
  director_not_starts_with: String

  """All values ending with the given string."""
  director_ends_with: String

  """All values not ending with the given string."""
  director_not_ends_with: String
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  genre1: MovieGenre

  """All values that are not equal to given value."""
  genre1_not: MovieGenre

  """All values that are contained in given list."""
  genre1_in: [MovieGenre!]

  """All values that are not contained in given list."""
  genre1_not_in: [MovieGenre!]
  genre2: MovieGenre

  """All values that are not equal to given value."""
  genre2_not: MovieGenre

  """All values that are contained in given list."""
  genre2_in: [MovieGenre!]

  """All values that are not contained in given list."""
  genre2_not_in: [MovieGenre!]
  genre3: MovieGenre

  """All values that are not equal to given value."""
  genre3_not: MovieGenre

  """All values that are contained in given list."""
  genre3_in: [MovieGenre!]

  """All values that are not contained in given list."""
  genre3_not_in: [MovieGenre!]
  length: Int

  """All values that are not equal to given value."""
  length_not: Int

  """All values that are contained in given list."""
  length_in: [Int!]

  """All values that are not contained in given list."""
  length_not_in: [Int!]

  """All values less than the given value."""
  length_lt: Int

  """All values less than or equal the given value."""
  length_lte: Int

  """All values greater than the given value."""
  length_gt: Int

  """All values greater than or equal the given value."""
  length_gte: Int
  budget: Int

  """All values that are not equal to given value."""
  budget_not: Int

  """All values that are contained in given list."""
  budget_in: [Int!]

  """All values that are not contained in given list."""
  budget_not_in: [Int!]

  """All values less than the given value."""
  budget_lt: Int

  """All values less than or equal the given value."""
  budget_lte: Int

  """All values greater than the given value."""
  budget_gt: Int

  """All values greater than or equal the given value."""
  budget_gte: Int
  gross: Int

  """All values that are not equal to given value."""
  gross_not: Int

  """All values that are contained in given list."""
  gross_in: [Int!]

  """All values that are not contained in given list."""
  gross_not_in: [Int!]

  """All values less than the given value."""
  gross_lt: Int

  """All values less than or equal the given value."""
  gross_lte: Int

  """All values greater than the given value."""
  gross_gt: Int

  """All values greater than or equal the given value."""
  gross_gte: Int
  imdbURL: String

  """All values that are not equal to given value."""
  imdbURL_not: String

  """All values that are contained in given list."""
  imdbURL_in: [String!]

  """All values that are not contained in given list."""
  imdbURL_not_in: [String!]

  """All values less than the given value."""
  imdbURL_lt: String

  """All values less than or equal the given value."""
  imdbURL_lte: String

  """All values greater than the given value."""
  imdbURL_gt: String

  """All values greater than or equal the given value."""
  imdbURL_gte: String

  """All values containing the given string."""
  imdbURL_contains: String

  """All values not containing the given string."""
  imdbURL_not_contains: String

  """All values starting with the given string."""
  imdbURL_starts_with: String

  """All values not starting with the given string."""
  imdbURL_not_starts_with: String

  """All values ending with the given string."""
  imdbURL_ends_with: String

  """All values not ending with the given string."""
  imdbURL_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  user: UserWhereInput
}

input MovieWhereUniqueInput {
  id: ID
}

type Mutation {
  createCartItem(data: CartItemCreateInput!): CartItem!
  createToWatchItem(data: ToWatchItemCreateInput!): ToWatchItem!
  createSeenItItem(data: SeenItItemCreateInput!): SeenItItem!
  createToReadItem(data: ToReadItemCreateInput!): ToReadItem!
  createReadItItem(data: ReadItItemCreateInput!): ReadItItem!
  createToPlayItem(data: ToPlayItemCreateInput!): ToPlayItem!
  createPlayedItItem(data: PlayedItItemCreateInput!): PlayedItItem!
  createOrder(data: OrderCreateInput!): Order!
  createGame(data: GameCreateInput!): Game!
  createItem(data: ItemCreateInput!): Item!
  createMovie(data: MovieCreateInput!): Movie!
  createOrderItem(data: OrderItemCreateInput!): OrderItem!
  createBook(data: BookCreateInput!): Book!
  createUser(data: UserCreateInput!): User!
  updateCartItem(data: CartItemUpdateInput!, where: CartItemWhereUniqueInput!): CartItem
  updateToWatchItem(data: ToWatchItemUpdateInput!, where: ToWatchItemWhereUniqueInput!): ToWatchItem
  updateSeenItItem(data: SeenItItemUpdateInput!, where: SeenItItemWhereUniqueInput!): SeenItItem
  updateToReadItem(data: ToReadItemUpdateInput!, where: ToReadItemWhereUniqueInput!): ToReadItem
  updateReadItItem(data: ReadItItemUpdateInput!, where: ReadItItemWhereUniqueInput!): ReadItItem
  updateToPlayItem(data: ToPlayItemUpdateInput!, where: ToPlayItemWhereUniqueInput!): ToPlayItem
  updatePlayedItItem(data: PlayedItItemUpdateInput!, where: PlayedItItemWhereUniqueInput!): PlayedItItem
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie
  updateOrderItem(data: OrderItemUpdateInput!, where: OrderItemWhereUniqueInput!): OrderItem
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteToWatchItem(where: ToWatchItemWhereUniqueInput!): ToWatchItem
  deleteSeenItItem(where: SeenItItemWhereUniqueInput!): SeenItItem
  deleteToReadItem(where: ToReadItemWhereUniqueInput!): ToReadItem
  deleteReadItItem(where: ReadItItemWhereUniqueInput!): ReadItItem
  deleteToPlayItem(where: ToPlayItemWhereUniqueInput!): ToPlayItem
  deletePlayedItItem(where: PlayedItItemWhereUniqueInput!): PlayedItItem
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteMovie(where: MovieWhereUniqueInput!): Movie
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteUser(where: UserWhereUniqueInput!): User
  upsertCartItem(where: CartItemWhereUniqueInput!, create: CartItemCreateInput!, update: CartItemUpdateInput!): CartItem!
  upsertToWatchItem(where: ToWatchItemWhereUniqueInput!, create: ToWatchItemCreateInput!, update: ToWatchItemUpdateInput!): ToWatchItem!
  upsertSeenItItem(where: SeenItItemWhereUniqueInput!, create: SeenItItemCreateInput!, update: SeenItItemUpdateInput!): SeenItItem!
  upsertToReadItem(where: ToReadItemWhereUniqueInput!, create: ToReadItemCreateInput!, update: ToReadItemUpdateInput!): ToReadItem!
  upsertReadItItem(where: ReadItItemWhereUniqueInput!, create: ReadItItemCreateInput!, update: ReadItItemUpdateInput!): ReadItItem!
  upsertToPlayItem(where: ToPlayItemWhereUniqueInput!, create: ToPlayItemCreateInput!, update: ToPlayItemUpdateInput!): ToPlayItem!
  upsertPlayedItItem(where: PlayedItItemWhereUniqueInput!, create: PlayedItItemCreateInput!, update: PlayedItItemUpdateInput!): PlayedItItem!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  upsertMovie(where: MovieWhereUniqueInput!, create: MovieCreateInput!, update: MovieUpdateInput!): Movie!
  upsertOrderItem(where: OrderItemWhereUniqueInput!, create: OrderItemCreateInput!, update: OrderItemUpdateInput!): OrderItem!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyCartItems(data: CartItemUpdateManyMutationInput!, where: CartItemWhereInput): BatchPayload!
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  updateManyGames(data: GameUpdateManyMutationInput!, where: GameWhereInput): BatchPayload!
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  updateManyMovies(data: MovieUpdateManyMutationInput!, where: MovieWhereInput): BatchPayload!
  updateManyOrderItems(data: OrderItemUpdateManyMutationInput!, where: OrderItemWhereInput): BatchPayload!
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyCartItems(where: CartItemWhereInput): BatchPayload!
  deleteManyToWatchItems(where: ToWatchItemWhereInput): BatchPayload!
  deleteManySeenItItems(where: SeenItItemWhereInput): BatchPayload!
  deleteManyToReadItems(where: ToReadItemWhereInput): BatchPayload!
  deleteManyReadItItems(where: ReadItItemWhereInput): BatchPayload!
  deleteManyToPlayItems(where: ToPlayItemWhereInput): BatchPayload!
  deleteManyPlayedItItems(where: PlayedItItemWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyGames(where: GameWhereInput): BatchPayload!
  deleteManyItems(where: ItemWhereInput): BatchPayload!
  deleteManyMovies(where: MovieWhereInput): BatchPayload!
  deleteManyOrderItems(where: OrderItemWhereInput): BatchPayload!
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

enum NumPlayers {
  UNSELECTED
  SINGLE_PLAYER_OFFLINE
  MULTI_PLAYER_OFFLINE
  SINGLE_PLAYER_ONLINE
  MULTI_PLAYER_ONLINE
}

type Order implements Node {
  id: ID!
  items(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem!]
  total: Int!
  user: User!
  charge: String!
  createdAt: DateTime
  updatedAt: DateTime
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  total: Int!
  charge: String!
  items: OrderItemCreateManyInput
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

type OrderItem implements Node {
  id: ID!
  title: String!
  description: String!
  image: String!
  largeImage: String!
  price: Int!
  quantity: Int!
  user: User
}

"""A connection to a list of items."""
type OrderItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderItemEdge]!
  aggregate: AggregateOrderItem!
}

input OrderItemCreateInput {
  id: ID
  title: String!
  description: String!
  image: String!
  largeImage: String!
  price: Int!
  quantity: Int
  user: UserCreateOneInput
}

input OrderItemCreateManyInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

"""An edge in a connection."""
type OrderItemEdge {
  """The item at the end of the edge."""
  node: OrderItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderItemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  largeImage_ASC
  largeImage_DESC
  price_ASC
  price_DESC
  quantity_ASC
  quantity_DESC
}

type OrderItemPreviousValues {
  id: ID!
  title: String!
  description: String!
  image: String!
  largeImage: String!
  price: Int!
  quantity: Int!
}

input OrderItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
}

type OrderItemSubscriptionPayload {
  mutation: MutationType!
  node: OrderItem
  updatedFields: [String!]
  previousValues: OrderItemPreviousValues
}

input OrderItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderItemWhereInput
}

input OrderItemUpdateDataInput {
  title: String
  description: String
  image: String
  largeImage: String
  price: Int
  quantity: Int
  user: UserUpdateOneInput
}

input OrderItemUpdateInput {
  title: String
  description: String
  image: String
  largeImage: String
  price: Int
  quantity: Int
  user: UserUpdateOneInput
}

input OrderItemUpdateManyDataInput {
  title: String
  description: String
  image: String
  largeImage: String
  price: Int
  quantity: Int
}

input OrderItemUpdateManyInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  delete: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueNestedInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  upsert: [OrderItemUpsertWithWhereUniqueNestedInput!]
}

input OrderItemUpdateManyMutationInput {
  title: String
  description: String
  image: String
  largeImage: String
  price: Int
  quantity: Int
}

input OrderItemUpdateManyWithWhereNestedInput {
  where: OrderItemScalarWhereInput!
  data: OrderItemUpdateManyDataInput!
}

input OrderItemUpdateWithWhereUniqueNestedInput {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateDataInput!
}

input OrderItemUpsertWithWhereUniqueNestedInput {
  where: OrderItemWhereUniqueInput!
  update: OrderItemUpdateDataInput!
  create: OrderItemCreateInput!
}

input OrderItemWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  user: UserWhereInput
}

input OrderItemWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  total_ASC
  total_DESC
  charge_ASC
  charge_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderPreviousValues {
  id: ID!
  total: Int!
  charge: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  total: Int
  charge: String
  items: OrderItemUpdateManyInput
  user: UserUpdateOneRequiredInput
}

input OrderUpdateManyMutationInput {
  total: Int
  charge: String
}

input OrderWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  total: Int

  """All values that are not equal to given value."""
  total_not: Int

  """All values that are contained in given list."""
  total_in: [Int!]

  """All values that are not contained in given list."""
  total_not_in: [Int!]

  """All values less than the given value."""
  total_lt: Int

  """All values less than or equal the given value."""
  total_lte: Int

  """All values greater than the given value."""
  total_gt: Int

  """All values greater than or equal the given value."""
  total_gte: Int
  charge: String

  """All values that are not equal to given value."""
  charge_not: String

  """All values that are contained in given list."""
  charge_in: [String!]

  """All values that are not contained in given list."""
  charge_not_in: [String!]

  """All values less than the given value."""
  charge_lt: String

  """All values less than or equal the given value."""
  charge_lte: String

  """All values greater than the given value."""
  charge_gt: String

  """All values greater than or equal the given value."""
  charge_gte: String

  """All values containing the given string."""
  charge_contains: String

  """All values not containing the given string."""
  charge_not_contains: String

  """All values starting with the given string."""
  charge_starts_with: String

  """All values not starting with the given string."""
  charge_not_starts_with: String

  """All values ending with the given string."""
  charge_ends_with: String

  """All values not ending with the given string."""
  charge_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  items_every: OrderItemWhereInput
  items_some: OrderItemWhereInput
  items_none: OrderItemWhereInput
  user: UserWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  ITEMCREATE
  ITEMUPDATE
  ITEMDELETE
  PERMISSIONUPDATE
}

type PlayedItItem implements Node {
  id: ID!
  game: Game
  user: User!
}

"""A connection to a list of items."""
type PlayedItItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlayedItItemEdge]!
  aggregate: AggregatePlayedItItem!
}

input PlayedItItemCreateInput {
  id: ID
  game: GameCreateOneInput
  user: UserCreateOneWithoutPlayedItInput!
}

input PlayedItItemCreateManyWithoutUserInput {
  create: [PlayedItItemCreateWithoutUserInput!]
  connect: [PlayedItItemWhereUniqueInput!]
}

input PlayedItItemCreateWithoutUserInput {
  id: ID
  game: GameCreateOneInput
}

"""An edge in a connection."""
type PlayedItItemEdge {
  """The item at the end of the edge."""
  node: PlayedItItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PlayedItItemOrderByInput {
  id_ASC
  id_DESC
}

type PlayedItItemPreviousValues {
  id: ID!
}

input PlayedItItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PlayedItItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlayedItItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlayedItItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type PlayedItItemSubscriptionPayload {
  mutation: MutationType!
  node: PlayedItItem
  updatedFields: [String!]
  previousValues: PlayedItItemPreviousValues
}

input PlayedItItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PlayedItItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlayedItItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlayedItItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlayedItItemWhereInput
}

input PlayedItItemUpdateInput {
  game: GameUpdateOneInput
  user: UserUpdateOneRequiredWithoutPlayedItInput
}

input PlayedItItemUpdateManyWithoutUserInput {
  create: [PlayedItItemCreateWithoutUserInput!]
  connect: [PlayedItItemWhereUniqueInput!]
  set: [PlayedItItemWhereUniqueInput!]
  disconnect: [PlayedItItemWhereUniqueInput!]
  delete: [PlayedItItemWhereUniqueInput!]
  update: [PlayedItItemUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [PlayedItItemScalarWhereInput!]
  upsert: [PlayedItItemUpsertWithWhereUniqueWithoutUserInput!]
}

input PlayedItItemUpdateWithoutUserDataInput {
  game: GameUpdateOneInput
}

input PlayedItItemUpdateWithWhereUniqueWithoutUserInput {
  where: PlayedItItemWhereUniqueInput!
  data: PlayedItItemUpdateWithoutUserDataInput!
}

input PlayedItItemUpsertWithWhereUniqueWithoutUserInput {
  where: PlayedItItemWhereUniqueInput!
  update: PlayedItItemUpdateWithoutUserDataInput!
  create: PlayedItItemCreateWithoutUserInput!
}

input PlayedItItemWhereInput {
  """Logical AND on all given filters."""
  AND: [PlayedItItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlayedItItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlayedItItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  game: GameWhereInput
  user: UserWhereInput
}

input PlayedItItemWhereUniqueInput {
  id: ID
}

type Query {
  cartItems(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CartItem]!
  toWatchItems(where: ToWatchItemWhereInput, orderBy: ToWatchItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ToWatchItem]!
  seenItItems(where: SeenItItemWhereInput, orderBy: SeenItItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SeenItItem]!
  toReadItems(where: ToReadItemWhereInput, orderBy: ToReadItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ToReadItem]!
  readItItems(where: ReadItItemWhereInput, orderBy: ReadItItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReadItItem]!
  toPlayItems(where: ToPlayItemWhereInput, orderBy: ToPlayItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ToPlayItem]!
  playedItItems(where: PlayedItItemWhereInput, orderBy: PlayedItItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlayedItItem]!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  movies(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Movie]!
  orderItems(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem]!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  toWatchItem(where: ToWatchItemWhereUniqueInput!): ToWatchItem
  seenItItem(where: SeenItItemWhereUniqueInput!): SeenItItem
  toReadItem(where: ToReadItemWhereUniqueInput!): ToReadItem
  readItItem(where: ReadItItemWhereUniqueInput!): ReadItItem
  toPlayItem(where: ToPlayItemWhereUniqueInput!): ToPlayItem
  playedItItem(where: PlayedItItemWhereUniqueInput!): PlayedItItem
  order(where: OrderWhereUniqueInput!): Order
  game(where: GameWhereUniqueInput!): Game
  item(where: ItemWhereUniqueInput!): Item
  movie(where: MovieWhereUniqueInput!): Movie
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  book(where: BookWhereUniqueInput!): Book
  user(where: UserWhereUniqueInput!): User
  cartItemsConnection(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CartItemConnection!
  toWatchItemsConnection(where: ToWatchItemWhereInput, orderBy: ToWatchItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ToWatchItemConnection!
  seenItItemsConnection(where: SeenItItemWhereInput, orderBy: SeenItItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SeenItItemConnection!
  toReadItemsConnection(where: ToReadItemWhereInput, orderBy: ToReadItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ToReadItemConnection!
  readItItemsConnection(where: ReadItItemWhereInput, orderBy: ReadItItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReadItItemConnection!
  toPlayItemsConnection(where: ToPlayItemWhereInput, orderBy: ToPlayItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ToPlayItemConnection!
  playedItItemsConnection(where: PlayedItItemWhereInput, orderBy: PlayedItItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlayedItItemConnection!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  moviesConnection(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MovieConnection!
  orderItemsConnection(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderItemConnection!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type ReadItItem implements Node {
  id: ID!
  book: Book
  user: User!
}

"""A connection to a list of items."""
type ReadItItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReadItItemEdge]!
  aggregate: AggregateReadItItem!
}

input ReadItItemCreateInput {
  id: ID
  book: BookCreateOneInput
  user: UserCreateOneWithoutReadItInput!
}

input ReadItItemCreateManyWithoutUserInput {
  create: [ReadItItemCreateWithoutUserInput!]
  connect: [ReadItItemWhereUniqueInput!]
}

input ReadItItemCreateWithoutUserInput {
  id: ID
  book: BookCreateOneInput
}

"""An edge in a connection."""
type ReadItItemEdge {
  """The item at the end of the edge."""
  node: ReadItItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReadItItemOrderByInput {
  id_ASC
  id_DESC
}

type ReadItItemPreviousValues {
  id: ID!
}

input ReadItItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ReadItItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReadItItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReadItItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type ReadItItemSubscriptionPayload {
  mutation: MutationType!
  node: ReadItItem
  updatedFields: [String!]
  previousValues: ReadItItemPreviousValues
}

input ReadItItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReadItItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReadItItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReadItItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReadItItemWhereInput
}

input ReadItItemUpdateInput {
  book: BookUpdateOneInput
  user: UserUpdateOneRequiredWithoutReadItInput
}

input ReadItItemUpdateManyWithoutUserInput {
  create: [ReadItItemCreateWithoutUserInput!]
  connect: [ReadItItemWhereUniqueInput!]
  set: [ReadItItemWhereUniqueInput!]
  disconnect: [ReadItItemWhereUniqueInput!]
  delete: [ReadItItemWhereUniqueInput!]
  update: [ReadItItemUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [ReadItItemScalarWhereInput!]
  upsert: [ReadItItemUpsertWithWhereUniqueWithoutUserInput!]
}

input ReadItItemUpdateWithoutUserDataInput {
  book: BookUpdateOneInput
}

input ReadItItemUpdateWithWhereUniqueWithoutUserInput {
  where: ReadItItemWhereUniqueInput!
  data: ReadItItemUpdateWithoutUserDataInput!
}

input ReadItItemUpsertWithWhereUniqueWithoutUserInput {
  where: ReadItItemWhereUniqueInput!
  update: ReadItItemUpdateWithoutUserDataInput!
  create: ReadItItemCreateWithoutUserInput!
}

input ReadItItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ReadItItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReadItItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReadItItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  book: BookWhereInput
  user: UserWhereInput
}

input ReadItItemWhereUniqueInput {
  id: ID
}

type SeenItItem implements Node {
  id: ID!
  movie: Movie
  user: User!
}

"""A connection to a list of items."""
type SeenItItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SeenItItemEdge]!
  aggregate: AggregateSeenItItem!
}

input SeenItItemCreateInput {
  id: ID
  movie: MovieCreateOneInput
  user: UserCreateOneWithoutSeenItInput!
}

input SeenItItemCreateManyWithoutUserInput {
  create: [SeenItItemCreateWithoutUserInput!]
  connect: [SeenItItemWhereUniqueInput!]
}

input SeenItItemCreateWithoutUserInput {
  id: ID
  movie: MovieCreateOneInput
}

"""An edge in a connection."""
type SeenItItemEdge {
  """The item at the end of the edge."""
  node: SeenItItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SeenItItemOrderByInput {
  id_ASC
  id_DESC
}

type SeenItItemPreviousValues {
  id: ID!
}

input SeenItItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SeenItItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeenItItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeenItItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type SeenItItemSubscriptionPayload {
  mutation: MutationType!
  node: SeenItItem
  updatedFields: [String!]
  previousValues: SeenItItemPreviousValues
}

input SeenItItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SeenItItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeenItItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeenItItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SeenItItemWhereInput
}

input SeenItItemUpdateInput {
  movie: MovieUpdateOneInput
  user: UserUpdateOneRequiredWithoutSeenItInput
}

input SeenItItemUpdateManyWithoutUserInput {
  create: [SeenItItemCreateWithoutUserInput!]
  connect: [SeenItItemWhereUniqueInput!]
  set: [SeenItItemWhereUniqueInput!]
  disconnect: [SeenItItemWhereUniqueInput!]
  delete: [SeenItItemWhereUniqueInput!]
  update: [SeenItItemUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [SeenItItemScalarWhereInput!]
  upsert: [SeenItItemUpsertWithWhereUniqueWithoutUserInput!]
}

input SeenItItemUpdateWithoutUserDataInput {
  movie: MovieUpdateOneInput
}

input SeenItItemUpdateWithWhereUniqueWithoutUserInput {
  where: SeenItItemWhereUniqueInput!
  data: SeenItItemUpdateWithoutUserDataInput!
}

input SeenItItemUpsertWithWhereUniqueWithoutUserInput {
  where: SeenItItemWhereUniqueInput!
  update: SeenItItemUpdateWithoutUserDataInput!
  create: SeenItItemCreateWithoutUserInput!
}

input SeenItItemWhereInput {
  """Logical AND on all given filters."""
  AND: [SeenItItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeenItItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeenItItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  movie: MovieWhereInput
  user: UserWhereInput
}

input SeenItItemWhereUniqueInput {
  id: ID
}

type Subscription {
  cartItem(where: CartItemSubscriptionWhereInput): CartItemSubscriptionPayload
  toWatchItem(where: ToWatchItemSubscriptionWhereInput): ToWatchItemSubscriptionPayload
  seenItItem(where: SeenItItemSubscriptionWhereInput): SeenItItemSubscriptionPayload
  toReadItem(where: ToReadItemSubscriptionWhereInput): ToReadItemSubscriptionPayload
  readItItem(where: ReadItItemSubscriptionWhereInput): ReadItItemSubscriptionPayload
  toPlayItem(where: ToPlayItemSubscriptionWhereInput): ToPlayItemSubscriptionPayload
  playedItItem(where: PlayedItItemSubscriptionWhereInput): PlayedItItemSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
  movie(where: MovieSubscriptionWhereInput): MovieSubscriptionPayload
  orderItem(where: OrderItemSubscriptionWhereInput): OrderItemSubscriptionPayload
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type ToPlayItem implements Node {
  id: ID!
  game: Game
  user: User!
}

"""A connection to a list of items."""
type ToPlayItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ToPlayItemEdge]!
  aggregate: AggregateToPlayItem!
}

input ToPlayItemCreateInput {
  id: ID
  game: GameCreateOneInput
  user: UserCreateOneWithoutToPlayInput!
}

input ToPlayItemCreateManyWithoutUserInput {
  create: [ToPlayItemCreateWithoutUserInput!]
  connect: [ToPlayItemWhereUniqueInput!]
}

input ToPlayItemCreateWithoutUserInput {
  id: ID
  game: GameCreateOneInput
}

"""An edge in a connection."""
type ToPlayItemEdge {
  """The item at the end of the edge."""
  node: ToPlayItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ToPlayItemOrderByInput {
  id_ASC
  id_DESC
}

type ToPlayItemPreviousValues {
  id: ID!
}

input ToPlayItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ToPlayItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ToPlayItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ToPlayItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type ToPlayItemSubscriptionPayload {
  mutation: MutationType!
  node: ToPlayItem
  updatedFields: [String!]
  previousValues: ToPlayItemPreviousValues
}

input ToPlayItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ToPlayItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ToPlayItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ToPlayItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ToPlayItemWhereInput
}

input ToPlayItemUpdateInput {
  game: GameUpdateOneInput
  user: UserUpdateOneRequiredWithoutToPlayInput
}

input ToPlayItemUpdateManyWithoutUserInput {
  create: [ToPlayItemCreateWithoutUserInput!]
  connect: [ToPlayItemWhereUniqueInput!]
  set: [ToPlayItemWhereUniqueInput!]
  disconnect: [ToPlayItemWhereUniqueInput!]
  delete: [ToPlayItemWhereUniqueInput!]
  update: [ToPlayItemUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [ToPlayItemScalarWhereInput!]
  upsert: [ToPlayItemUpsertWithWhereUniqueWithoutUserInput!]
}

input ToPlayItemUpdateWithoutUserDataInput {
  game: GameUpdateOneInput
}

input ToPlayItemUpdateWithWhereUniqueWithoutUserInput {
  where: ToPlayItemWhereUniqueInput!
  data: ToPlayItemUpdateWithoutUserDataInput!
}

input ToPlayItemUpsertWithWhereUniqueWithoutUserInput {
  where: ToPlayItemWhereUniqueInput!
  update: ToPlayItemUpdateWithoutUserDataInput!
  create: ToPlayItemCreateWithoutUserInput!
}

input ToPlayItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ToPlayItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ToPlayItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ToPlayItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  game: GameWhereInput
  user: UserWhereInput
}

input ToPlayItemWhereUniqueInput {
  id: ID
}

type ToReadItem implements Node {
  id: ID!
  book: Book
  user: User!
}

"""A connection to a list of items."""
type ToReadItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ToReadItemEdge]!
  aggregate: AggregateToReadItem!
}

input ToReadItemCreateInput {
  id: ID
  book: BookCreateOneInput
  user: UserCreateOneWithoutToReadInput!
}

input ToReadItemCreateManyWithoutUserInput {
  create: [ToReadItemCreateWithoutUserInput!]
  connect: [ToReadItemWhereUniqueInput!]
}

input ToReadItemCreateWithoutUserInput {
  id: ID
  book: BookCreateOneInput
}

"""An edge in a connection."""
type ToReadItemEdge {
  """The item at the end of the edge."""
  node: ToReadItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ToReadItemOrderByInput {
  id_ASC
  id_DESC
}

type ToReadItemPreviousValues {
  id: ID!
}

input ToReadItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ToReadItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ToReadItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ToReadItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type ToReadItemSubscriptionPayload {
  mutation: MutationType!
  node: ToReadItem
  updatedFields: [String!]
  previousValues: ToReadItemPreviousValues
}

input ToReadItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ToReadItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ToReadItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ToReadItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ToReadItemWhereInput
}

input ToReadItemUpdateInput {
  book: BookUpdateOneInput
  user: UserUpdateOneRequiredWithoutToReadInput
}

input ToReadItemUpdateManyWithoutUserInput {
  create: [ToReadItemCreateWithoutUserInput!]
  connect: [ToReadItemWhereUniqueInput!]
  set: [ToReadItemWhereUniqueInput!]
  disconnect: [ToReadItemWhereUniqueInput!]
  delete: [ToReadItemWhereUniqueInput!]
  update: [ToReadItemUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [ToReadItemScalarWhereInput!]
  upsert: [ToReadItemUpsertWithWhereUniqueWithoutUserInput!]
}

input ToReadItemUpdateWithoutUserDataInput {
  book: BookUpdateOneInput
}

input ToReadItemUpdateWithWhereUniqueWithoutUserInput {
  where: ToReadItemWhereUniqueInput!
  data: ToReadItemUpdateWithoutUserDataInput!
}

input ToReadItemUpsertWithWhereUniqueWithoutUserInput {
  where: ToReadItemWhereUniqueInput!
  update: ToReadItemUpdateWithoutUserDataInput!
  create: ToReadItemCreateWithoutUserInput!
}

input ToReadItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ToReadItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ToReadItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ToReadItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  book: BookWhereInput
  user: UserWhereInput
}

input ToReadItemWhereUniqueInput {
  id: ID
}

type ToWatchItem implements Node {
  id: ID!
  movie: Movie
  user: User!
}

"""A connection to a list of items."""
type ToWatchItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ToWatchItemEdge]!
  aggregate: AggregateToWatchItem!
}

input ToWatchItemCreateInput {
  id: ID
  movie: MovieCreateOneInput
  user: UserCreateOneWithoutToWatchInput!
}

input ToWatchItemCreateManyWithoutUserInput {
  create: [ToWatchItemCreateWithoutUserInput!]
  connect: [ToWatchItemWhereUniqueInput!]
}

input ToWatchItemCreateWithoutUserInput {
  id: ID
  movie: MovieCreateOneInput
}

"""An edge in a connection."""
type ToWatchItemEdge {
  """The item at the end of the edge."""
  node: ToWatchItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ToWatchItemOrderByInput {
  id_ASC
  id_DESC
}

type ToWatchItemPreviousValues {
  id: ID!
}

input ToWatchItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ToWatchItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ToWatchItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ToWatchItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type ToWatchItemSubscriptionPayload {
  mutation: MutationType!
  node: ToWatchItem
  updatedFields: [String!]
  previousValues: ToWatchItemPreviousValues
}

input ToWatchItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ToWatchItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ToWatchItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ToWatchItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ToWatchItemWhereInput
}

input ToWatchItemUpdateInput {
  movie: MovieUpdateOneInput
  user: UserUpdateOneRequiredWithoutToWatchInput
}

input ToWatchItemUpdateManyWithoutUserInput {
  create: [ToWatchItemCreateWithoutUserInput!]
  connect: [ToWatchItemWhereUniqueInput!]
  set: [ToWatchItemWhereUniqueInput!]
  disconnect: [ToWatchItemWhereUniqueInput!]
  delete: [ToWatchItemWhereUniqueInput!]
  update: [ToWatchItemUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [ToWatchItemScalarWhereInput!]
  upsert: [ToWatchItemUpsertWithWhereUniqueWithoutUserInput!]
}

input ToWatchItemUpdateWithoutUserDataInput {
  movie: MovieUpdateOneInput
}

input ToWatchItemUpdateWithWhereUniqueWithoutUserInput {
  where: ToWatchItemWhereUniqueInput!
  data: ToWatchItemUpdateWithoutUserDataInput!
}

input ToWatchItemUpsertWithWhereUniqueWithoutUserInput {
  where: ToWatchItemWhereUniqueInput!
  update: ToWatchItemUpdateWithoutUserDataInput!
  create: ToWatchItemCreateWithoutUserInput!
}

input ToWatchItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ToWatchItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ToWatchItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ToWatchItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  movie: MovieWhereInput
  user: UserWhereInput
}

input ToWatchItemWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  cart(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CartItem!]
  toWatch(where: ToWatchItemWhereInput, orderBy: ToWatchItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ToWatchItem!]
  seenIt(where: SeenItItemWhereInput, orderBy: SeenItItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SeenItItem!]
  toRead(where: ToReadItemWhereInput, orderBy: ToReadItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ToReadItem!]
  readIt(where: ReadItItemWhereInput, orderBy: ReadItItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ReadItItem!]
  toPlay(where: ToPlayItemWhereInput, orderBy: ToPlayItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ToPlayItem!]
  playedIt(where: PlayedItItemWhereInput, orderBy: PlayedItItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlayedItItem!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  cart: CartItemCreateManyWithoutUserInput
  toWatch: ToWatchItemCreateManyWithoutUserInput
  seenIt: SeenItItemCreateManyWithoutUserInput
  toRead: ToReadItemCreateManyWithoutUserInput
  readIt: ReadItItemCreateManyWithoutUserInput
  toPlay: ToPlayItemCreateManyWithoutUserInput
  playedIt: PlayedItItemCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCartInput {
  create: UserCreateWithoutCartInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPlayedItInput {
  create: UserCreateWithoutPlayedItInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReadItInput {
  create: UserCreateWithoutReadItInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSeenItInput {
  create: UserCreateWithoutSeenItInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutToPlayInput {
  create: UserCreateWithoutToPlayInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutToReadInput {
  create: UserCreateWithoutToReadInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutToWatchInput {
  create: UserCreateWithoutToWatchInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutCartInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  toWatch: ToWatchItemCreateManyWithoutUserInput
  seenIt: SeenItItemCreateManyWithoutUserInput
  toRead: ToReadItemCreateManyWithoutUserInput
  readIt: ReadItItemCreateManyWithoutUserInput
  toPlay: ToPlayItemCreateManyWithoutUserInput
  playedIt: PlayedItItemCreateManyWithoutUserInput
}

input UserCreateWithoutPlayedItInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  cart: CartItemCreateManyWithoutUserInput
  toWatch: ToWatchItemCreateManyWithoutUserInput
  seenIt: SeenItItemCreateManyWithoutUserInput
  toRead: ToReadItemCreateManyWithoutUserInput
  readIt: ReadItItemCreateManyWithoutUserInput
  toPlay: ToPlayItemCreateManyWithoutUserInput
}

input UserCreateWithoutReadItInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  cart: CartItemCreateManyWithoutUserInput
  toWatch: ToWatchItemCreateManyWithoutUserInput
  seenIt: SeenItItemCreateManyWithoutUserInput
  toRead: ToReadItemCreateManyWithoutUserInput
  toPlay: ToPlayItemCreateManyWithoutUserInput
  playedIt: PlayedItItemCreateManyWithoutUserInput
}

input UserCreateWithoutSeenItInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  cart: CartItemCreateManyWithoutUserInput
  toWatch: ToWatchItemCreateManyWithoutUserInput
  toRead: ToReadItemCreateManyWithoutUserInput
  readIt: ReadItItemCreateManyWithoutUserInput
  toPlay: ToPlayItemCreateManyWithoutUserInput
  playedIt: PlayedItItemCreateManyWithoutUserInput
}

input UserCreateWithoutToPlayInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  cart: CartItemCreateManyWithoutUserInput
  toWatch: ToWatchItemCreateManyWithoutUserInput
  seenIt: SeenItItemCreateManyWithoutUserInput
  toRead: ToReadItemCreateManyWithoutUserInput
  readIt: ReadItItemCreateManyWithoutUserInput
  playedIt: PlayedItItemCreateManyWithoutUserInput
}

input UserCreateWithoutToReadInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  cart: CartItemCreateManyWithoutUserInput
  toWatch: ToWatchItemCreateManyWithoutUserInput
  seenIt: SeenItItemCreateManyWithoutUserInput
  readIt: ReadItItemCreateManyWithoutUserInput
  toPlay: ToPlayItemCreateManyWithoutUserInput
  playedIt: PlayedItItemCreateManyWithoutUserInput
}

input UserCreateWithoutToWatchInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  cart: CartItemCreateManyWithoutUserInput
  seenIt: SeenItItemCreateManyWithoutUserInput
  toRead: ToReadItemCreateManyWithoutUserInput
  readIt: ReadItItemCreateManyWithoutUserInput
  toPlay: ToPlayItemCreateManyWithoutUserInput
  playedIt: PlayedItItemCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  cart: CartItemUpdateManyWithoutUserInput
  toWatch: ToWatchItemUpdateManyWithoutUserInput
  seenIt: SeenItItemUpdateManyWithoutUserInput
  toRead: ToReadItemUpdateManyWithoutUserInput
  readIt: ReadItItemUpdateManyWithoutUserInput
  toPlay: ToPlayItemUpdateManyWithoutUserInput
  playedIt: PlayedItItemUpdateManyWithoutUserInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  cart: CartItemUpdateManyWithoutUserInput
  toWatch: ToWatchItemUpdateManyWithoutUserInput
  seenIt: SeenItItemUpdateManyWithoutUserInput
  toRead: ToReadItemUpdateManyWithoutUserInput
  readIt: ReadItItemUpdateManyWithoutUserInput
  toPlay: ToPlayItemUpdateManyWithoutUserInput
  playedIt: PlayedItItemUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutCartInput {
  create: UserCreateWithoutCartInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCartDataInput
  upsert: UserUpsertWithoutCartInput
}

input UserUpdateOneRequiredWithoutPlayedItInput {
  create: UserCreateWithoutPlayedItInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPlayedItDataInput
  upsert: UserUpsertWithoutPlayedItInput
}

input UserUpdateOneRequiredWithoutReadItInput {
  create: UserCreateWithoutReadItInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutReadItDataInput
  upsert: UserUpsertWithoutReadItInput
}

input UserUpdateOneRequiredWithoutSeenItInput {
  create: UserCreateWithoutSeenItInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSeenItDataInput
  upsert: UserUpsertWithoutSeenItInput
}

input UserUpdateOneRequiredWithoutToPlayInput {
  create: UserCreateWithoutToPlayInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutToPlayDataInput
  upsert: UserUpsertWithoutToPlayInput
}

input UserUpdateOneRequiredWithoutToReadInput {
  create: UserCreateWithoutToReadInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutToReadDataInput
  upsert: UserUpsertWithoutToReadInput
}

input UserUpdateOneRequiredWithoutToWatchInput {
  create: UserCreateWithoutToWatchInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutToWatchDataInput
  upsert: UserUpsertWithoutToWatchInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutCartDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  toWatch: ToWatchItemUpdateManyWithoutUserInput
  seenIt: SeenItItemUpdateManyWithoutUserInput
  toRead: ToReadItemUpdateManyWithoutUserInput
  readIt: ReadItItemUpdateManyWithoutUserInput
  toPlay: ToPlayItemUpdateManyWithoutUserInput
  playedIt: PlayedItItemUpdateManyWithoutUserInput
}

input UserUpdateWithoutPlayedItDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  cart: CartItemUpdateManyWithoutUserInput
  toWatch: ToWatchItemUpdateManyWithoutUserInput
  seenIt: SeenItItemUpdateManyWithoutUserInput
  toRead: ToReadItemUpdateManyWithoutUserInput
  readIt: ReadItItemUpdateManyWithoutUserInput
  toPlay: ToPlayItemUpdateManyWithoutUserInput
}

input UserUpdateWithoutReadItDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  cart: CartItemUpdateManyWithoutUserInput
  toWatch: ToWatchItemUpdateManyWithoutUserInput
  seenIt: SeenItItemUpdateManyWithoutUserInput
  toRead: ToReadItemUpdateManyWithoutUserInput
  toPlay: ToPlayItemUpdateManyWithoutUserInput
  playedIt: PlayedItItemUpdateManyWithoutUserInput
}

input UserUpdateWithoutSeenItDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  cart: CartItemUpdateManyWithoutUserInput
  toWatch: ToWatchItemUpdateManyWithoutUserInput
  toRead: ToReadItemUpdateManyWithoutUserInput
  readIt: ReadItItemUpdateManyWithoutUserInput
  toPlay: ToPlayItemUpdateManyWithoutUserInput
  playedIt: PlayedItItemUpdateManyWithoutUserInput
}

input UserUpdateWithoutToPlayDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  cart: CartItemUpdateManyWithoutUserInput
  toWatch: ToWatchItemUpdateManyWithoutUserInput
  seenIt: SeenItItemUpdateManyWithoutUserInput
  toRead: ToReadItemUpdateManyWithoutUserInput
  readIt: ReadItItemUpdateManyWithoutUserInput
  playedIt: PlayedItItemUpdateManyWithoutUserInput
}

input UserUpdateWithoutToReadDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  cart: CartItemUpdateManyWithoutUserInput
  toWatch: ToWatchItemUpdateManyWithoutUserInput
  seenIt: SeenItItemUpdateManyWithoutUserInput
  readIt: ReadItItemUpdateManyWithoutUserInput
  toPlay: ToPlayItemUpdateManyWithoutUserInput
  playedIt: PlayedItItemUpdateManyWithoutUserInput
}

input UserUpdateWithoutToWatchDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  cart: CartItemUpdateManyWithoutUserInput
  seenIt: SeenItItemUpdateManyWithoutUserInput
  toRead: ToReadItemUpdateManyWithoutUserInput
  readIt: ReadItItemUpdateManyWithoutUserInput
  toPlay: ToPlayItemUpdateManyWithoutUserInput
  playedIt: PlayedItItemUpdateManyWithoutUserInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput!
  create: UserCreateWithoutCartInput!
}

input UserUpsertWithoutPlayedItInput {
  update: UserUpdateWithoutPlayedItDataInput!
  create: UserCreateWithoutPlayedItInput!
}

input UserUpsertWithoutReadItInput {
  update: UserUpdateWithoutReadItDataInput!
  create: UserCreateWithoutReadItInput!
}

input UserUpsertWithoutSeenItInput {
  update: UserUpdateWithoutSeenItDataInput!
  create: UserCreateWithoutSeenItInput!
}

input UserUpsertWithoutToPlayInput {
  update: UserUpdateWithoutToPlayDataInput!
  create: UserCreateWithoutToPlayInput!
}

input UserUpsertWithoutToReadInput {
  update: UserUpdateWithoutToReadDataInput!
  create: UserCreateWithoutToReadInput!
}

input UserUpsertWithoutToWatchInput {
  update: UserUpdateWithoutToWatchDataInput!
  create: UserCreateWithoutToWatchInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  cart_every: CartItemWhereInput
  cart_some: CartItemWhereInput
  cart_none: CartItemWhereInput
  toWatch_every: ToWatchItemWhereInput
  toWatch_some: ToWatchItemWhereInput
  toWatch_none: ToWatchItemWhereInput
  seenIt_every: SeenItItemWhereInput
  seenIt_some: SeenItItemWhereInput
  seenIt_none: SeenItItemWhereInput
  toRead_every: ToReadItemWhereInput
  toRead_some: ToReadItemWhereInput
  toRead_none: ToReadItemWhereInput
  readIt_every: ReadItItemWhereInput
  readIt_some: ReadItItemWhereInput
  readIt_none: ReadItItemWhereInput
  toPlay_every: ToPlayItemWhereInput
  toPlay_some: ToPlayItemWhereInput
  toPlay_none: ToPlayItemWhereInput
  playedIt_every: PlayedItItemWhereInput
  playedIt_some: PlayedItItemWhereInput
  playedIt_none: PlayedItItemWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
